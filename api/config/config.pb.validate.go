// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/config/config.proto

package configuration

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Bootstrap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bootstrap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bootstrap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BootstrapMultiError, or nil
// if none found.
func (m *Bootstrap) ValidateAll() error {
	return m.validate(true)
}

func (m *Bootstrap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Server",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInfrastructure()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Infrastructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Infrastructure",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfrastructure()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Infrastructure",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClientApi()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "ClientApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "ClientApi",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClientApi()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "ClientApi",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BootstrapMultiError(errors)
	}

	return nil
}

// BootstrapMultiError is an error wrapping multiple validation errors returned
// by Bootstrap.ValidateAll() if the designated constraints aren't met.
type BootstrapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapMultiError) AllErrors() []error { return m }

// BootstrapValidationError is the validation error returned by
// Bootstrap.Validate if the designated constraints aren't met.
type BootstrapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapValidationError) ErrorName() string { return "BootstrapValidationError" }

// Error satisfies the builtin error interface
func (e BootstrapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BelongTo

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Env

	// no validation rules for EnvBranch

	// no validation rules for Metadata

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Grpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on Infrastructure with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Infrastructure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InfrastructureMultiError,
// or nil if none found.
func (m *Infrastructure) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfrastructureValidationError{
				field:  "Log",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMysql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfrastructureValidationError{
				field:  "Mysql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPsql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Psql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Psql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPsql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfrastructureValidationError{
				field:  "Psql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRedis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRedis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfrastructureValidationError{
				field:  "Redis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRabbitmq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Rabbitmq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Rabbitmq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRabbitmq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfrastructureValidationError{
				field:  "Rabbitmq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConsul()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Consul",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Consul",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsul()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfrastructureValidationError{
				field:  "Consul",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJaeger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Jaeger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Jaeger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJaeger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfrastructureValidationError{
				field:  "Jaeger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSnowflake()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Snowflake",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InfrastructureValidationError{
					field:  "Snowflake",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnowflake()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InfrastructureValidationError{
				field:  "Snowflake",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InfrastructureMultiError(errors)
	}

	return nil
}

// InfrastructureMultiError is an error wrapping multiple validation errors
// returned by Infrastructure.ValidateAll() if the designated constraints
// aren't met.
type InfrastructureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InfrastructureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InfrastructureMultiError) AllErrors() []error { return m }

// InfrastructureValidationError is the validation error returned by
// Infrastructure.Validate if the designated constraints aren't met.
type InfrastructureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfrastructureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfrastructureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfrastructureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfrastructureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfrastructureValidationError) ErrorName() string { return "InfrastructureValidationError" }

// Error satisfies the builtin error interface
func (e InfrastructureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfrastructureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfrastructureValidationError{}

// Validate checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Setting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SettingMultiError, or nil if none found.
func (m *Setting) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnableServiceRegistry

	// no validation rules for EnableSnowflakeWorker

	// no validation rules for EnableMigrateDb

	// no validation rules for EnableScheduleTask

	if all {
		switch v := interface{}(m.GetCaptcha()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "Captcha",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "Captcha",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCaptcha()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingValidationError{
				field:  "Captcha",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "Login",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "Login",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingValidationError{
				field:  "Login",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEncryptSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "EncryptSecret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "EncryptSecret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEncryptSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingValidationError{
				field:  "EncryptSecret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SettingMultiError(errors)
	}

	return nil
}

// SettingMultiError is an error wrapping multiple validation errors returned
// by Setting.ValidateAll() if the designated constraints aren't met.
type SettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingMultiError) AllErrors() []error { return m }

// SettingValidationError is the validation error returned by Setting.Validate
// if the designated constraints aren't met.
type SettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingValidationError) ErrorName() string { return "SettingValidationError" }

// Error satisfies the builtin error interface
func (e SettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingValidationError{}

// Validate checks the field values on ClientApi with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientApi with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientApiMultiError, or nil
// if none found.
func (m *ClientApi) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClusterService() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientApiValidationError{
						field:  fmt.Sprintf("ClusterService[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientApiValidationError{
						field:  fmt.Sprintf("ClusterService[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientApiValidationError{
					field:  fmt.Sprintf("ClusterService[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetThirdParty() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientApiValidationError{
						field:  fmt.Sprintf("ThirdParty[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientApiValidationError{
						field:  fmt.Sprintf("ThirdParty[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientApiValidationError{
					field:  fmt.Sprintf("ThirdParty[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClientApiMultiError(errors)
	}

	return nil
}

// ClientApiMultiError is an error wrapping multiple validation errors returned
// by ClientApi.ValidateAll() if the designated constraints aren't met.
type ClientApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientApiMultiError) AllErrors() []error { return m }

// ClientApiValidationError is the validation error returned by
// ClientApi.Validate if the designated constraints aren't met.
type ClientApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientApiValidationError) ErrorName() string { return "ClientApiValidationError" }

// Error satisfies the builtin error interface
func (e ClientApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientApiValidationError{}

// Validate checks the field values on Server_HTTP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_HTTP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_HTTP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_HTTPMultiError, or
// nil if none found.
func (m *Server_HTTP) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_HTTP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Network

	// no validation rules for Addr

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_HTTPValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Server_HTTPMultiError(errors)
	}

	return nil
}

// Server_HTTPMultiError is an error wrapping multiple validation errors
// returned by Server_HTTP.ValidateAll() if the designated constraints aren't met.
type Server_HTTPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_HTTPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_HTTPMultiError) AllErrors() []error { return m }

// Server_HTTPValidationError is the validation error returned by
// Server_HTTP.Validate if the designated constraints aren't met.
type Server_HTTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_HTTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_HTTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_HTTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_HTTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_HTTPValidationError) ErrorName() string { return "Server_HTTPValidationError" }

// Error satisfies the builtin error interface
func (e Server_HTTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_HTTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_HTTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_HTTPValidationError{}

// Validate checks the field values on Server_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_GRPC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_GRPCMultiError, or
// nil if none found.
func (m *Server_GRPC) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_GRPC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Network

	// no validation rules for Addr

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_GRPCValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Server_GRPCMultiError(errors)
	}

	return nil
}

// Server_GRPCMultiError is an error wrapping multiple validation errors
// returned by Server_GRPC.ValidateAll() if the designated constraints aren't met.
type Server_GRPCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_GRPCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_GRPCMultiError) AllErrors() []error { return m }

// Server_GRPCValidationError is the validation error returned by
// Server_GRPC.Validate if the designated constraints aren't met.
type Server_GRPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_GRPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_GRPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_GRPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_GRPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_GRPCValidationError) ErrorName() string { return "Server_GRPCValidationError" }

// Error satisfies the builtin error interface
func (e Server_GRPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_GRPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_GRPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_GRPCValidationError{}

// Validate checks the field values on Infrastructure_Log with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_Log with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_LogMultiError, or nil if none found.
func (m *Infrastructure_Log) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_LogValidationError{
					field:  "Console",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_LogValidationError{
					field:  "Console",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_LogValidationError{
				field:  "Console",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_LogValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_LogValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_LogValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Infrastructure_LogMultiError(errors)
	}

	return nil
}

// Infrastructure_LogMultiError is an error wrapping multiple validation errors
// returned by Infrastructure_Log.ValidateAll() if the designated constraints
// aren't met.
type Infrastructure_LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_LogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_LogMultiError) AllErrors() []error { return m }

// Infrastructure_LogValidationError is the validation error returned by
// Infrastructure_Log.Validate if the designated constraints aren't met.
type Infrastructure_LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_LogValidationError) ErrorName() string {
	return "Infrastructure_LogValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_Log.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_LogValidationError{}

// Validate checks the field values on Infrastructure_MySQL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_MySQL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_MySQL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_MySQLMultiError, or nil if none found.
func (m *Infrastructure_MySQL) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_MySQL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetSlowThreshold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_MySQLValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_MySQLValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlowThreshold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_MySQLValidationError{
				field:  "SlowThreshold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LoggerEnable

	// no validation rules for LoggerColorful

	// no validation rules for LoggerLevel

	// no validation rules for ConnMaxActive

	if all {
		switch v := interface{}(m.GetConnMaxLifetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_MySQLValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_MySQLValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_MySQLValidationError{
				field:  "ConnMaxLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnMaxIdle

	if all {
		switch v := interface{}(m.GetConnMaxIdleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_MySQLValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_MySQLValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxIdleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_MySQLValidationError{
				field:  "ConnMaxIdleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Infrastructure_MySQLMultiError(errors)
	}

	return nil
}

// Infrastructure_MySQLMultiError is an error wrapping multiple validation
// errors returned by Infrastructure_MySQL.ValidateAll() if the designated
// constraints aren't met.
type Infrastructure_MySQLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_MySQLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_MySQLMultiError) AllErrors() []error { return m }

// Infrastructure_MySQLValidationError is the validation error returned by
// Infrastructure_MySQL.Validate if the designated constraints aren't met.
type Infrastructure_MySQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_MySQLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_MySQLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_MySQLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_MySQLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_MySQLValidationError) ErrorName() string {
	return "Infrastructure_MySQLValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_MySQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_MySQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_MySQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_MySQLValidationError{}

// Validate checks the field values on Infrastructure_Redis with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_Redis) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_Redis with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_RedisMultiError, or nil if none found.
func (m *Infrastructure_Redis) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_Redis) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Db

	if all {
		switch v := interface{}(m.GetDialTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "DialTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "DialTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDialTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_RedisValidationError{
				field:  "DialTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReadTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "ReadTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "ReadTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_RedisValidationError{
				field:  "ReadTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWriteTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "WriteTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "WriteTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWriteTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_RedisValidationError{
				field:  "WriteTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnMaxActive

	if all {
		switch v := interface{}(m.GetConnMaxLifetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_RedisValidationError{
				field:  "ConnMaxLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnMaxIdle

	// no validation rules for ConnMinIdle

	if all {
		switch v := interface{}(m.GetConnMaxIdleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_RedisValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxIdleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_RedisValidationError{
				field:  "ConnMaxIdleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Infrastructure_RedisMultiError(errors)
	}

	return nil
}

// Infrastructure_RedisMultiError is an error wrapping multiple validation
// errors returned by Infrastructure_Redis.ValidateAll() if the designated
// constraints aren't met.
type Infrastructure_RedisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_RedisMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_RedisMultiError) AllErrors() []error { return m }

// Infrastructure_RedisValidationError is the validation error returned by
// Infrastructure_Redis.Validate if the designated constraints aren't met.
type Infrastructure_RedisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_RedisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_RedisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_RedisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_RedisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_RedisValidationError) ErrorName() string {
	return "Infrastructure_RedisValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_RedisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_Redis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_RedisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_RedisValidationError{}

// Validate checks the field values on Infrastructure_PSQL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_PSQL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_PSQL with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_PSQLMultiError, or nil if none found.
func (m *Infrastructure_PSQL) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_PSQL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetSlowThreshold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_PSQLValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_PSQLValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlowThreshold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_PSQLValidationError{
				field:  "SlowThreshold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LoggerEnable

	// no validation rules for LoggerColorful

	// no validation rules for LoggerLevel

	// no validation rules for ConnMaxActive

	if all {
		switch v := interface{}(m.GetConnMaxLifetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_PSQLValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_PSQLValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_PSQLValidationError{
				field:  "ConnMaxLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnMaxIdle

	if all {
		switch v := interface{}(m.GetConnMaxIdleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_PSQLValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_PSQLValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxIdleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_PSQLValidationError{
				field:  "ConnMaxIdleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Infrastructure_PSQLMultiError(errors)
	}

	return nil
}

// Infrastructure_PSQLMultiError is an error wrapping multiple validation
// errors returned by Infrastructure_PSQL.ValidateAll() if the designated
// constraints aren't met.
type Infrastructure_PSQLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_PSQLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_PSQLMultiError) AllErrors() []error { return m }

// Infrastructure_PSQLValidationError is the validation error returned by
// Infrastructure_PSQL.Validate if the designated constraints aren't met.
type Infrastructure_PSQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_PSQLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_PSQLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_PSQLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_PSQLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_PSQLValidationError) ErrorName() string {
	return "Infrastructure_PSQLValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_PSQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_PSQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_PSQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_PSQLValidationError{}

// Validate checks the field values on Infrastructure_Consul with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_Consul) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_Consul with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_ConsulMultiError, or nil if none found.
func (m *Infrastructure_Consul) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_Consul) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Scheme

	// no validation rules for Address

	// no validation rules for PathPrefix

	// no validation rules for Datacenter

	if all {
		switch v := interface{}(m.GetWaitTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_ConsulValidationError{
					field:  "WaitTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_ConsulValidationError{
					field:  "WaitTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaitTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_ConsulValidationError{
				field:  "WaitTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	// no validation rules for Namespace

	// no validation rules for Partition

	// no validation rules for WithHttpBasicAuth

	// no validation rules for AuthUsername

	// no validation rules for AuthPassword

	// no validation rules for InsecureSkipVerify

	// no validation rules for TlsAddress

	// no validation rules for TlsCaPem

	// no validation rules for TlsCertPem

	// no validation rules for TlsKeyPem

	if len(errors) > 0 {
		return Infrastructure_ConsulMultiError(errors)
	}

	return nil
}

// Infrastructure_ConsulMultiError is an error wrapping multiple validation
// errors returned by Infrastructure_Consul.ValidateAll() if the designated
// constraints aren't met.
type Infrastructure_ConsulMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_ConsulMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_ConsulMultiError) AllErrors() []error { return m }

// Infrastructure_ConsulValidationError is the validation error returned by
// Infrastructure_Consul.Validate if the designated constraints aren't met.
type Infrastructure_ConsulValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_ConsulValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_ConsulValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_ConsulValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_ConsulValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_ConsulValidationError) ErrorName() string {
	return "Infrastructure_ConsulValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_ConsulValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_Consul.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_ConsulValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_ConsulValidationError{}

// Validate checks the field values on Infrastructure_Jaeger with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_Jaeger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_Jaeger with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_JaegerMultiError, or nil if none found.
func (m *Infrastructure_Jaeger) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_Jaeger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Endpoint

	// no validation rules for WithHttpBasicAuth

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return Infrastructure_JaegerMultiError(errors)
	}

	return nil
}

// Infrastructure_JaegerMultiError is an error wrapping multiple validation
// errors returned by Infrastructure_Jaeger.ValidateAll() if the designated
// constraints aren't met.
type Infrastructure_JaegerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_JaegerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_JaegerMultiError) AllErrors() []error { return m }

// Infrastructure_JaegerValidationError is the validation error returned by
// Infrastructure_Jaeger.Validate if the designated constraints aren't met.
type Infrastructure_JaegerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_JaegerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_JaegerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_JaegerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_JaegerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_JaegerValidationError) ErrorName() string {
	return "Infrastructure_JaegerValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_JaegerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_Jaeger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_JaegerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_JaegerValidationError{}

// Validate checks the field values on Infrastructure_Rabbitmq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_Rabbitmq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_Rabbitmq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_RabbitmqMultiError, or nil if none found.
func (m *Infrastructure_Rabbitmq) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_Rabbitmq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Url

	// no validation rules for TlsAddress

	// no validation rules for TlsCaPem

	// no validation rules for TlsCertPem

	// no validation rules for TlsKeyPem

	if len(errors) > 0 {
		return Infrastructure_RabbitmqMultiError(errors)
	}

	return nil
}

// Infrastructure_RabbitmqMultiError is an error wrapping multiple validation
// errors returned by Infrastructure_Rabbitmq.ValidateAll() if the designated
// constraints aren't met.
type Infrastructure_RabbitmqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_RabbitmqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_RabbitmqMultiError) AllErrors() []error { return m }

// Infrastructure_RabbitmqValidationError is the validation error returned by
// Infrastructure_Rabbitmq.Validate if the designated constraints aren't met.
type Infrastructure_RabbitmqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_RabbitmqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_RabbitmqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_RabbitmqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_RabbitmqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_RabbitmqValidationError) ErrorName() string {
	return "Infrastructure_RabbitmqValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_RabbitmqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_Rabbitmq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_RabbitmqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_RabbitmqValidationError{}

// Validate checks the field values on Infrastructure_Snowflake with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_Snowflake) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_Snowflake with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_SnowflakeMultiError, or nil if none found.
func (m *Infrastructure_Snowflake) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_Snowflake) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Endpoint

	// no validation rules for WithDiscovery

	// no validation rules for WithHttpBasicAuth

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return Infrastructure_SnowflakeMultiError(errors)
	}

	return nil
}

// Infrastructure_SnowflakeMultiError is an error wrapping multiple validation
// errors returned by Infrastructure_Snowflake.ValidateAll() if the designated
// constraints aren't met.
type Infrastructure_SnowflakeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_SnowflakeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_SnowflakeMultiError) AllErrors() []error { return m }

// Infrastructure_SnowflakeValidationError is the validation error returned by
// Infrastructure_Snowflake.Validate if the designated constraints aren't met.
type Infrastructure_SnowflakeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_SnowflakeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_SnowflakeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_SnowflakeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_SnowflakeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_SnowflakeValidationError) ErrorName() string {
	return "Infrastructure_SnowflakeValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_SnowflakeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_Snowflake.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_SnowflakeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_SnowflakeValidationError{}

// Validate checks the field values on Infrastructure_Log_Console with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_Log_Console) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_Log_Console with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_Log_ConsoleMultiError, or nil if none found.
func (m *Infrastructure_Log_Console) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_Log_Console) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Level

	if len(errors) > 0 {
		return Infrastructure_Log_ConsoleMultiError(errors)
	}

	return nil
}

// Infrastructure_Log_ConsoleMultiError is an error wrapping multiple
// validation errors returned by Infrastructure_Log_Console.ValidateAll() if
// the designated constraints aren't met.
type Infrastructure_Log_ConsoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_Log_ConsoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_Log_ConsoleMultiError) AllErrors() []error { return m }

// Infrastructure_Log_ConsoleValidationError is the validation error returned
// by Infrastructure_Log_Console.Validate if the designated constraints aren't met.
type Infrastructure_Log_ConsoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_Log_ConsoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_Log_ConsoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_Log_ConsoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_Log_ConsoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_Log_ConsoleValidationError) ErrorName() string {
	return "Infrastructure_Log_ConsoleValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_Log_ConsoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_Log_Console.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_Log_ConsoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_Log_ConsoleValidationError{}

// Validate checks the field values on Infrastructure_Log_File with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Infrastructure_Log_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Infrastructure_Log_File with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Infrastructure_Log_FileMultiError, or nil if none found.
func (m *Infrastructure_Log_File) ValidateAll() error {
	return m.validate(true)
}

func (m *Infrastructure_Log_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Level

	// no validation rules for Dir

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetRotateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_Log_FileValidationError{
					field:  "RotateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_Log_FileValidationError{
					field:  "RotateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRotateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_Log_FileValidationError{
				field:  "RotateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RotateSize

	if all {
		switch v := interface{}(m.GetStorageAge()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Infrastructure_Log_FileValidationError{
					field:  "StorageAge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Infrastructure_Log_FileValidationError{
					field:  "StorageAge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageAge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Infrastructure_Log_FileValidationError{
				field:  "StorageAge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StorageCounter

	if len(errors) > 0 {
		return Infrastructure_Log_FileMultiError(errors)
	}

	return nil
}

// Infrastructure_Log_FileMultiError is an error wrapping multiple validation
// errors returned by Infrastructure_Log_File.ValidateAll() if the designated
// constraints aren't met.
type Infrastructure_Log_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Infrastructure_Log_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Infrastructure_Log_FileMultiError) AllErrors() []error { return m }

// Infrastructure_Log_FileValidationError is the validation error returned by
// Infrastructure_Log_File.Validate if the designated constraints aren't met.
type Infrastructure_Log_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Infrastructure_Log_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Infrastructure_Log_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Infrastructure_Log_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Infrastructure_Log_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Infrastructure_Log_FileValidationError) ErrorName() string {
	return "Infrastructure_Log_FileValidationError"
}

// Error satisfies the builtin error interface
func (e Infrastructure_Log_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfrastructure_Log_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Infrastructure_Log_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Infrastructure_Log_FileValidationError{}

// Validate checks the field values on Setting_Captcha with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Setting_Captcha) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting_Captcha with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Setting_CaptchaMultiError, or nil if none found.
func (m *Setting_Captcha) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting_Captcha) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaLen

	if all {
		switch v := interface{}(m.GetCaptchaTtl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_CaptchaValidationError{
					field:  "CaptchaTtl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_CaptchaValidationError{
					field:  "CaptchaTtl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCaptchaTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_CaptchaValidationError{
				field:  "CaptchaTtl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Setting_CaptchaMultiError(errors)
	}

	return nil
}

// Setting_CaptchaMultiError is an error wrapping multiple validation errors
// returned by Setting_Captcha.ValidateAll() if the designated constraints
// aren't met.
type Setting_CaptchaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Setting_CaptchaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Setting_CaptchaMultiError) AllErrors() []error { return m }

// Setting_CaptchaValidationError is the validation error returned by
// Setting_Captcha.Validate if the designated constraints aren't met.
type Setting_CaptchaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Setting_CaptchaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Setting_CaptchaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Setting_CaptchaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Setting_CaptchaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Setting_CaptchaValidationError) ErrorName() string { return "Setting_CaptchaValidationError" }

// Error satisfies the builtin error interface
func (e Setting_CaptchaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting_Captcha.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Setting_CaptchaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Setting_CaptchaValidationError{}

// Validate checks the field values on Setting_Login with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Setting_Login) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting_Login with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Setting_LoginMultiError, or
// nil if none found.
func (m *Setting_Login) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting_Login) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordErrSerialTimes

	if all {
		switch v := interface{}(m.GetPasswordErrSerialDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_LoginValidationError{
					field:  "PasswordErrSerialDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_LoginValidationError{
					field:  "PasswordErrSerialDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPasswordErrSerialDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_LoginValidationError{
				field:  "PasswordErrSerialDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPasswordErrLockDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_LoginValidationError{
					field:  "PasswordErrLockDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_LoginValidationError{
					field:  "PasswordErrLockDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPasswordErrLockDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_LoginValidationError{
				field:  "PasswordErrLockDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PasswordErrDailyLimitTimes

	if len(errors) > 0 {
		return Setting_LoginMultiError(errors)
	}

	return nil
}

// Setting_LoginMultiError is an error wrapping multiple validation errors
// returned by Setting_Login.ValidateAll() if the designated constraints
// aren't met.
type Setting_LoginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Setting_LoginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Setting_LoginMultiError) AllErrors() []error { return m }

// Setting_LoginValidationError is the validation error returned by
// Setting_Login.Validate if the designated constraints aren't met.
type Setting_LoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Setting_LoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Setting_LoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Setting_LoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Setting_LoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Setting_LoginValidationError) ErrorName() string { return "Setting_LoginValidationError" }

// Error satisfies the builtin error interface
func (e Setting_LoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting_Login.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Setting_LoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Setting_LoginValidationError{}

// Validate checks the field values on Setting_EncryptSecret with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Setting_EncryptSecret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting_EncryptSecret with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Setting_EncryptSecretMultiError, or nil if none found.
func (m *Setting_EncryptSecret) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting_EncryptSecret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransferEncrypt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_EncryptSecretValidationError{
					field:  "TransferEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_EncryptSecretValidationError{
					field:  "TransferEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransferEncrypt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_EncryptSecretValidationError{
				field:  "TransferEncrypt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServiceEncrypt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_EncryptSecretValidationError{
					field:  "ServiceEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_EncryptSecretValidationError{
					field:  "ServiceEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceEncrypt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_EncryptSecretValidationError{
				field:  "ServiceEncrypt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTokenEncrypt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_EncryptSecretValidationError{
					field:  "TokenEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_EncryptSecretValidationError{
					field:  "TokenEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenEncrypt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_EncryptSecretValidationError{
				field:  "TokenEncrypt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Setting_EncryptSecretMultiError(errors)
	}

	return nil
}

// Setting_EncryptSecretMultiError is an error wrapping multiple validation
// errors returned by Setting_EncryptSecret.ValidateAll() if the designated
// constraints aren't met.
type Setting_EncryptSecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Setting_EncryptSecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Setting_EncryptSecretMultiError) AllErrors() []error { return m }

// Setting_EncryptSecretValidationError is the validation error returned by
// Setting_EncryptSecret.Validate if the designated constraints aren't met.
type Setting_EncryptSecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Setting_EncryptSecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Setting_EncryptSecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Setting_EncryptSecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Setting_EncryptSecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Setting_EncryptSecretValidationError) ErrorName() string {
	return "Setting_EncryptSecretValidationError"
}

// Error satisfies the builtin error interface
func (e Setting_EncryptSecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting_EncryptSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Setting_EncryptSecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Setting_EncryptSecretValidationError{}

// Validate checks the field values on Setting_EncryptSecret_TransferEncrypt
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Setting_EncryptSecret_TransferEncrypt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting_EncryptSecret_TransferEncrypt
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Setting_EncryptSecret_TransferEncryptMultiError, or nil if none found.
func (m *Setting_EncryptSecret_TransferEncrypt) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting_EncryptSecret_TransferEncrypt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for PrivateKey

	if len(errors) > 0 {
		return Setting_EncryptSecret_TransferEncryptMultiError(errors)
	}

	return nil
}

// Setting_EncryptSecret_TransferEncryptMultiError is an error wrapping
// multiple validation errors returned by
// Setting_EncryptSecret_TransferEncrypt.ValidateAll() if the designated
// constraints aren't met.
type Setting_EncryptSecret_TransferEncryptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Setting_EncryptSecret_TransferEncryptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Setting_EncryptSecret_TransferEncryptMultiError) AllErrors() []error { return m }

// Setting_EncryptSecret_TransferEncryptValidationError is the validation error
// returned by Setting_EncryptSecret_TransferEncrypt.Validate if the
// designated constraints aren't met.
type Setting_EncryptSecret_TransferEncryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Setting_EncryptSecret_TransferEncryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Setting_EncryptSecret_TransferEncryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Setting_EncryptSecret_TransferEncryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Setting_EncryptSecret_TransferEncryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Setting_EncryptSecret_TransferEncryptValidationError) ErrorName() string {
	return "Setting_EncryptSecret_TransferEncryptValidationError"
}

// Error satisfies the builtin error interface
func (e Setting_EncryptSecret_TransferEncryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting_EncryptSecret_TransferEncrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Setting_EncryptSecret_TransferEncryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Setting_EncryptSecret_TransferEncryptValidationError{}

// Validate checks the field values on Setting_EncryptSecret_ServiceEncrypt
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Setting_EncryptSecret_ServiceEncrypt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting_EncryptSecret_ServiceEncrypt
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Setting_EncryptSecret_ServiceEncryptMultiError, or nil if none found.
func (m *Setting_EncryptSecret_ServiceEncrypt) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting_EncryptSecret_ServiceEncrypt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for PrivateKey

	if len(errors) > 0 {
		return Setting_EncryptSecret_ServiceEncryptMultiError(errors)
	}

	return nil
}

// Setting_EncryptSecret_ServiceEncryptMultiError is an error wrapping multiple
// validation errors returned by
// Setting_EncryptSecret_ServiceEncrypt.ValidateAll() if the designated
// constraints aren't met.
type Setting_EncryptSecret_ServiceEncryptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Setting_EncryptSecret_ServiceEncryptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Setting_EncryptSecret_ServiceEncryptMultiError) AllErrors() []error { return m }

// Setting_EncryptSecret_ServiceEncryptValidationError is the validation error
// returned by Setting_EncryptSecret_ServiceEncrypt.Validate if the designated
// constraints aren't met.
type Setting_EncryptSecret_ServiceEncryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Setting_EncryptSecret_ServiceEncryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Setting_EncryptSecret_ServiceEncryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Setting_EncryptSecret_ServiceEncryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Setting_EncryptSecret_ServiceEncryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Setting_EncryptSecret_ServiceEncryptValidationError) ErrorName() string {
	return "Setting_EncryptSecret_ServiceEncryptValidationError"
}

// Error satisfies the builtin error interface
func (e Setting_EncryptSecret_ServiceEncryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting_EncryptSecret_ServiceEncrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Setting_EncryptSecret_ServiceEncryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Setting_EncryptSecret_ServiceEncryptValidationError{}

// Validate checks the field values on Setting_EncryptSecret_TokenEncrypt with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Setting_EncryptSecret_TokenEncrypt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting_EncryptSecret_TokenEncrypt
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Setting_EncryptSecret_TokenEncryptMultiError, or nil if none found.
func (m *Setting_EncryptSecret_TokenEncrypt) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting_EncryptSecret_TokenEncrypt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignKey

	// no validation rules for RefreshKey

	if len(errors) > 0 {
		return Setting_EncryptSecret_TokenEncryptMultiError(errors)
	}

	return nil
}

// Setting_EncryptSecret_TokenEncryptMultiError is an error wrapping multiple
// validation errors returned by
// Setting_EncryptSecret_TokenEncrypt.ValidateAll() if the designated
// constraints aren't met.
type Setting_EncryptSecret_TokenEncryptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Setting_EncryptSecret_TokenEncryptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Setting_EncryptSecret_TokenEncryptMultiError) AllErrors() []error { return m }

// Setting_EncryptSecret_TokenEncryptValidationError is the validation error
// returned by Setting_EncryptSecret_TokenEncrypt.Validate if the designated
// constraints aren't met.
type Setting_EncryptSecret_TokenEncryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Setting_EncryptSecret_TokenEncryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Setting_EncryptSecret_TokenEncryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Setting_EncryptSecret_TokenEncryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Setting_EncryptSecret_TokenEncryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Setting_EncryptSecret_TokenEncryptValidationError) ErrorName() string {
	return "Setting_EncryptSecret_TokenEncryptValidationError"
}

// Error satisfies the builtin error interface
func (e Setting_EncryptSecret_TokenEncryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting_EncryptSecret_TokenEncrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Setting_EncryptSecret_TokenEncryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Setting_EncryptSecret_TokenEncryptValidationError{}

// Validate checks the field values on ClientApi_Endpoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClientApi_Endpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientApi_Endpoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClientApi_EndpointMultiError, or nil if none found.
func (m *ClientApi_Endpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientApi_Endpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for RegistryName

	// no validation rules for HttpHost

	// no validation rules for GrpcHost

	if len(errors) > 0 {
		return ClientApi_EndpointMultiError(errors)
	}

	return nil
}

// ClientApi_EndpointMultiError is an error wrapping multiple validation errors
// returned by ClientApi_Endpoint.ValidateAll() if the designated constraints
// aren't met.
type ClientApi_EndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientApi_EndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientApi_EndpointMultiError) AllErrors() []error { return m }

// ClientApi_EndpointValidationError is the validation error returned by
// ClientApi_Endpoint.Validate if the designated constraints aren't met.
type ClientApi_EndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientApi_EndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientApi_EndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientApi_EndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientApi_EndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientApi_EndpointValidationError) ErrorName() string {
	return "ClientApi_EndpointValidationError"
}

// Error satisfies the builtin error interface
func (e ClientApi_EndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientApi_Endpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientApi_EndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientApi_EndpointValidationError{}
